{"version":3,"sources":["axios.js","watchlist/SymbolSearcher.js","watchlist/WatchList.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","timeout","SymbolSearcher","props","companySymbols","symbols","lastUpdate","selectedSymbols","setSelectedSymbols","useState","searchValue","setSearchValue","id","style","width","showSearch","onSearch","options","map","s","label","span","symbol","description","value","filterOption","input","inputValue","toUpperCase","includes","onSelect","__","option","newSelectedSymbols","selectedOption","push","message","success","Date","toISOString","length","marginTop","dataSource","renderItem","item","marginBottom","paddingLeft","CloseOutlined","onClick","filter","WATCHLIST_KEY","COMPANY_SYMBOLS","WatchList","componentDidMount","localStorage","getItem","get","process","then","res","status","console","error","data","sort","a","b","getTime","setState","setItem","JSON","stringify","setShowAddModal","isVisible","modalVisible","modalProps","state","parse","watchLists","this","columns","key","dataIndex","title","render","Math","floor","random","w","name","display","justifyContent","trigger","onConfirm","newWatchLists","type","size","ghost","showHeader","locale","emptyText","pagination","pageSize","footer","textAlign","icon","PlusCircleOutlined","visible","onCancel","maskClosable","destroyOnClose","paddingTop","onFinish","values","post","watchlist","log","catch","err","initialValues","Item","rules","required","htmlType","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7f7f406.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:5001',\r\n  timeout: 1000\r\n});\r\n\r\nexport default instance;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Select, Row, Col, List, message } from 'antd';\r\nimport { CloseOutlined } from '@ant-design/icons';\r\nimport './tickerSearch.css';\r\n\r\nconst SymbolSearcher = props => {\r\n  const {\r\n    companySymbols: { symbols, lastUpdate } = {},\r\n    selectedSymbols, setSelectedSymbols\r\n  } = props;\r\n  const [searchValue, setSearchValue] = useState('');\r\n\r\n  return (\r\n    <div id='ticker-search-wrapper'>\r\n      <h4>\r\n        Add Symbol(s) to this watchlist\r\n      </h4>\r\n      <Select\r\n        style={{ width: '100%' }}\r\n        showSearch // equiv showSearch = true\r\n        onSearch={setSearchValue}\r\n        searchValue={searchValue}\r\n        options={(symbols || []).map(s => ({\r\n          // mapping to get desired array of object\r\n          label: <Row>\r\n            <Col span={5}>{s.symbol}</Col>\r\n            <Col span={18}>{s.description}</Col>\r\n          </Row>,\r\n          value: s.symbol,\r\n          ...s\r\n        }))}\r\n        filterOption={(input, { value, description }) => {\r\n          const inputValue = input.toUpperCase();\r\n          return value.toUpperCase().includes(inputValue) ||\r\n            description.toUpperCase().includes(inputValue);\r\n        }}\r\n        onSelect={(__, option) => {\r\n          const newSelectedSymbols = [...selectedSymbols];\r\n          const selectedOption = { ...option };\r\n\r\n          delete selectedOption.label;\r\n          delete selectedOption.value;\r\n          newSelectedSymbols.push(selectedOption);\r\n\r\n          setSelectedSymbols(newSelectedSymbols);\r\n          message.success('Symbol added');\r\n        }}\r\n      />\r\n      <small>Last update: {new Date(lastUpdate).toISOString()}</small>\r\n      {\r\n        selectedSymbols.length > 0 &&\r\n        <List\r\n          style={{ marginTop: 25 }}\r\n          dataSource={selectedSymbols}\r\n          renderItem={item => {\r\n            return <Row style={{ marginBottom: 10, paddingLeft: 5 }}>\r\n              <Col span={5}>{item.symbol}</Col>\r\n              <Col span={18}>{item.description}</Col>\r\n              <Col>\r\n                <CloseOutlined\r\n                  onClick={() => {\r\n                    const newSelectedSymbols = selectedSymbols.filter(s =>\r\n                      s.symbol !== item.symbol\r\n                    );\r\n                    setSelectedSymbols(newSelectedSymbols);\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          }}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nSymbolSearcher.propTypes = {\r\n  companySymbols: PropTypes.shape({\r\n    symbols: PropTypes.array.isRequired,\r\n    lastUpdate: PropTypes.number.isRequired\r\n  }),\r\n  selectedSymbols: PropTypes.array.isRequired,\r\n  setSelectedSymbols: PropTypes.func.isRequired\r\n}\r\n\r\nexport default SymbolSearcher;\r\n","import React, { Component } from 'react';\r\nimport { Button, Table, Input, Form, Modal, Popconfirm } from 'antd';\r\nimport axios from '../axios';\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport './watchlist.css';\r\nimport SymbolSearcher from './SymbolSearcher';\r\n\r\nconst WATCHLIST_KEY = 'watchList';\r\nconst COMPANY_SYMBOLS = 'companySymbols';\r\nconst FINNHUB_KEY = process.env.REACT_APP_FINNHUB_KEY;\r\n\r\nconst getWatchLists = () =>\r\n  // array of objects containing watch list name and list of symbols\r\n  JSON.parse(localStorage.getItem(WATCHLIST_KEY)) || [];\r\n\r\nexport class WatchList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      companySymbols: JSON.parse(localStorage.getItem(COMPANY_SYMBOLS)),\r\n      watchLists: getWatchLists(),\r\n      modalVisible: false,\r\n      modalProps: {},\r\n      selectedSymbols: []\r\n    };\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (!localStorage.getItem(COMPANY_SYMBOLS)) {\r\n      axios.get(`https://finnhub.io/api/v1/stock/symbol?exchange=US&currency=USD&token=${FINNHUB_KEY}`)\r\n        .then(res => {\r\n          if (!res.status) return console.error('Failed to load symbols');\r\n\r\n          // sort displayName/ symbol\r\n          const symbols = (res.data || []).sort((a, b) => {\r\n            if (a.symbol < b.symbol)\r\n              return -1;\r\n            if (a.symbol > b.symbol)\r\n              return 1;\r\n            return 0;\r\n          });\r\n\r\n          const companySymbols = {\r\n            symbols,\r\n            lastUpdate: new Date().getTime()\r\n          };\r\n\r\n          this.setState({ companySymbols });\r\n\r\n          localStorage.setItem(COMPANY_SYMBOLS, JSON.stringify(companySymbols));\r\n        });\r\n    }\r\n  };\r\n\r\n  setShowAddModal = (isVisible = true) =>\r\n    this.setState({ modalVisible: isVisible, modalProps: {}, selectedSymbols: [] });\r\n\r\n  setSelectedSymbols = (selectedSymbols = this.state.selectedSymbols) =>\r\n    this.setState({ selectedSymbols });\r\n\r\n  render() {\r\n    const { modalVisible, watchLists } = this.state;\r\n\r\n    const columns = [\r\n      {\r\n        key: 'symbol',\r\n        dataIndex: 'symbol',\r\n        title: 'Symbol'\r\n      },\r\n      {\r\n        key: 'description',\r\n        dataIndex: 'description',\r\n        title: 'Description'\r\n      },\r\n      {\r\n        key: 'currentPrice',\r\n        dataIndex: 'currentPrice',\r\n        title: 'Current Price',\r\n        render: () => <div>${Math.floor(Math.random() * 1000) + 1}</div>\r\n      },\r\n      {\r\n        key: 'shareAmount',\r\n        dataIndex: 'shareAmount',\r\n        title: 'Amount of shares',\r\n        render: () => <div>{Math.floor(Math.random() * 100) + 1}</div>\r\n      },\r\n      {\r\n        key: 'dailyGain',\r\n        dataIndex: 'dailyGain',\r\n        title: 'Daily gain',\r\n        render: () => <div>{Math.floor(Math.random() * 5) + 1}%</div>\r\n      }\r\n    ];\r\n\r\n    return <div id='watch-list-container'>\r\n      <Button\r\n        style={{ marginBottom: 35 }}\r\n        onClick={this.setShowAddModal}\r\n      >\r\n        Add a Watchlist\r\n      </Button>\r\n      {\r\n        watchLists.length > 0 &&\r\n        watchLists.map(w => {\r\n          const { id, name, symbols = [] } = w;\r\n          return <div key={id} style={{ marginBottom: 25 }}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n              <h3>{name}</h3>\r\n              <Popconfirm\r\n                title='Are you sure to delete this watchlist?'\r\n                trigger='click'\r\n                onConfirm={() => {\r\n                  const newWatchLists = watchLists.filter(w => w.id !== id);\r\n                  this.setState({ watchLists: newWatchLists }, () => {\r\n                    localStorage.setItem(WATCHLIST_KEY, JSON.stringify(newWatchLists));\r\n                  });\r\n                }}\r\n              >\r\n                <Button type='danger' size='small' ghost>\r\n                  Delete\r\n                </Button>\r\n              </Popconfirm>\r\n            </div>\r\n            <Table\r\n              key={id}\r\n              showHeader={symbols.length > 0}\r\n              columns={columns}\r\n              dataSource={symbols}\r\n              locale={{ emptyText: 'No symbol' }}\r\n              pagination={{ pageSize: 5 }}\r\n              footer={() => <div style={{ textAlign: 'left' }}>\r\n                <Button\r\n                  type='link' icon={<PlusCircleOutlined />}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      modalVisible: true,\r\n                      modalProps: w,\r\n                      selectedSymbols: w.symbols\r\n                    })\r\n                  }}\r\n                >\r\n                  Edit Watchlist or Add new Symbol\r\n                </Button>\r\n              </div>\r\n              }\r\n            />\r\n          </div>;\r\n        })\r\n      }\r\n      <Modal\r\n        visible={modalVisible}\r\n        onCancel={() => this.setShowAddModal(false)}\r\n        footer={null}\r\n        maskClosable={false}\r\n        destroyOnClose\r\n      >\r\n        <div style={{ paddingTop: 25 }}>\r\n          <Form\r\n            onFinish={values => {\r\n              // shallow copy: fast if the copy obj is simple\r\n              // deepClone: slower if the copy obj has nested values\r\n              const { name } = values;\r\n              // '/watchlist': API endpoint url\r\n              // fetch API can make POST request as well\r\n              // try {\r\n              //   const data = await axios.post('/watchlist', {\r\n              //     watchlist: { name }\r\n              //   });\r\n              // } catch (err) {\r\n              //   console.error(err);\r\n              // }\r\n              axios.post('/watchlist', {\r\n                watchlist: { name }\r\n              }).then(res => {\r\n                console.log(res);\r\n              }).catch(err => {\r\n                console.error(err);\r\n              });\r\n            }}\r\n            // onFinish={({ name }) => {\r\n            //   const { watchLists, modalProps, selectedSymbols } = this.state;\r\n\r\n            //   let newWatchLists = [...watchLists];\r\n            //   const symbols = selectedSymbols.map(s => ({\r\n            //     symbol: s.symbol,\r\n            //     description: s.description,\r\n            //     currency: s.currency\r\n            //   }));\r\n\r\n            //   if (modalProps.name) {\r\n            //     const { id } = modalProps;\r\n            //     // Edit\r\n            //     newWatchLists = newWatchLists.map(w => {\r\n            //       if (w.id === id)\r\n            //         return { id, name, symbols };\r\n            //       return w;\r\n            //     });\r\n            //   } else {\r\n            //     // Add\r\n            //     const id = `${name}-${new Date().getTime()}`;\r\n            //     newWatchLists.push({ id, name, symbols });\r\n            //   }\r\n\r\n            //   this.setState({ watchLists: newWatchLists });\r\n            //   this.setShowAddModal(false);\r\n            //   localStorage.setItem(WATCHLIST_KEY, JSON.stringify(newWatchLists));\r\n            // }}\r\n            initialValues={{ name: this.state.modalProps.name }}\r\n          >\r\n            <Form.Item\r\n              name='name'\r\n              label='Watchlist name'\r\n              rules={[{ required: true, message: 'Please input name' }]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <SymbolSearcher\r\n                companySymbols={this.state.companySymbols}\r\n                selectedSymbols={this.state.selectedSymbols}\r\n                setSelectedSymbols={this.setSelectedSymbols}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type='primary' htmlType='submit'>\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </Modal>\r\n    </div>;\r\n  };\r\n};\r\n\r\nexport default WatchList;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport WatchList from './watchlist/WatchList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WatchList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}